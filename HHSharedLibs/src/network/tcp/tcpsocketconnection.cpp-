
#include <QtNetwork>

#include "tcpsocketconnection.h"



static const int TransferTimeout = 30 * 1000;
static const int PongTimeout = 60 * 1000;
static const int PingInterval = 5 * 1000;
static const char SeparatorToken = ' ';
QString TcpSocketConnection::id = "";

TcpSocketConnection::TcpSocketConnection(const QString &greetingMessage, QObject *parent)
    : QTcpSocket(parent)
{

    this->greetingMessage = tr("Hi~");

    state = HEHUI::WaitingForGreeting;
    currentDataType = HEHUI::UNDEFINED;
    numBytesForCurrentDataType = -1;
    transferTimerId = 0;
    isGreetingMessageSent = false;
    pingTimer.setInterval(PingInterval);

    nextBlockSize = 0;


    QObject::connect(this, SIGNAL(readyRead()), this, SLOT(slotProcessReadyRead()));
    QObject::connect(this, SIGNAL(disconnected()), &pingTimer, SLOT(stop()));
    QObject::connect(&pingTimer, SIGNAL(timeout()), this, SLOT(slotSendPing()));
    QObject::connect(this, SIGNAL(connected()),
                     this, SLOT(slotSendGreetingMessage()));
}



  void TcpSocketConnection::setGreetingMessage(const QString &message)
{
    greetingMessage = message;

}


bool TcpSocketConnection::sendMessage(const QString &message)
{
	QByteArray block;
			    QDataStream out(&block, QIODevice::WriteOnly);
			    out.setVersion(QDataStream::Qt_4_4);
			    out << quint16(0) << quint16(HEHUI::MSG_CHAT_PLAIN) << message;

			    out.device()->seek(0);
			    out << quint16(block.size() - sizeof(quint16));
			    //write(block);
			    return write(block) == block.size();
/*
     if (message.isEmpty())
        return false;

    QByteArray msg = message.toUtf8();
    QByteArray data = "MESSAGE " + QByteArray::number(msg.size()) + " " + msg;
    return write(data) == data.size();
*/

}

void TcpSocketConnection::timerEvent(QTimerEvent *timerEvent)
{
    if (timerEvent->timerId() == transferTimerId) {
        abort();
        killTimer(transferTimerId);
        transferTimerId = 0;
    }
}

void TcpSocketConnection::slotProcessReadyRead()
{
    if (state == HEHUI::WaitingForGreeting) {
        if (!readProtocolHeader())
            return;
        if (currentDataType != HEHUI::MSG_GREETING) {
            abort();
            return;
        }
        state = HEHUI::ReadingGreeting;
    }

    if (state == HEHUI::ReadingGreeting) {
        if (!hasEnoughData())
            return;

        buffer = read(numBytesForCurrentDataType);
        if (buffer.size() != numBytesForCurrentDataType) {
            abort();
            return;
        }



        peerGreetingMessage = QString(buffer);
        currentDataType = HEHUI::UNDEFINED;
        numBytesForCurrentDataType = 0;
        buffer.clear();

        if (!isValid()) {
            abort();
            return;
        }

        if (!isGreetingMessageSent)
            slotSendGreetingMessage();

        pingTimer.start();
        pongTime.start();
        state = HEHUI::ReadyForUse;
        emit signalTcpSocketConnectionReadyForUse();
    }

/*
    do {
        if (currentDataType == Undefined) {
            if (!readProtocolHeader())
                return;
        }
        if (!hasEnoughData())
            return;
        processData();
    } while (bytesAvailable() > 0);
*/








	QDataStream in(this);
	    in.setVersion(QDataStream::Qt_4_4);

	    forever {
	        if (nextBlockSize == 0) {
	            if (bytesAvailable() < sizeof(quint16))
	                break;
	            in >> nextBlockSize;
	        }

	        if (nextBlockSize == 0xFFFF) {
	            //closeConnection();
	            //statusLabel->setText(tr("Found %1 trip(s)").arg(row));
	            break;
	        }

	        if (bytesAvailable() < nextBlockSize)
	            break;

	        quint16 dataType;
	        in >>  dataType;

	        if(dataType == HEHUI::MSG_GREETING){
	        	QString pid;
	        	in >> pid;
	        	setPeerID(pid);
	        	qDebug()<<"TcpSocketConnection::slotProcessReadyRead()~~Data Type:MSG_GREETING, pid:"<<pid;
	        }
	        if(dataType == HEHUI::MSG_CHAT_PLAIN){
	        	QString msg;
	        	in >> msg;
	        	emit signalNewChatMessageReceivedFromPeer(id, msg);
	        	qDebug()<<"TcpSocketConnection::slotProcessReadyRead()~~Data Type:MSG_CHAT_PLAIN, msg:"<<msg;
	        }
	        if(dataType == HEHUI::MSG_CHAT_RICH){
	        	QString msg;
	        	QStringList list;
	        	in >> msg >> list;
	        	qDebug()<<"TcpSocketConnection::slotProcessReadyRead()~~Data Type:MSG_CHAT_RICH, msg:"<<msg;
	        }

	        //TODO:消息处理
	        qDebug()<<"TcpSocketConnection::slotProcessReadyRead()~~Data Type:~~~~";


/*

	        switch (dataType) {
	            case MSG_GREETING:
	            	in >> contactID;
	                break;
	            case MSG_CHAT_PLAIN:
	                write("PONG 1 p");
	                break;
	            case Ping:
	                write("PONG 1 p");
	                break;
	            case Pong:
	                pongTime.restart();
	                break;
	            default:
	                break;
	            }
*/

	        nextBlockSize = 0;
	    }



}

void TcpSocketConnection::slotSendPing()
{
    if (pongTime.elapsed() > PongTimeout) {
        abort();
        return;
    }

    write("PING 1 p");
}


void TcpSocketConnection::slotSendGreetingMessage()
{
    QByteArray block;
    QDataStream out(&block, QIODevice::WriteOnly);
    out.setVersion(QDataStream::Qt_4_4);
    out << quint16(0) << quint16(HEHUI::MSG_GREETING) << id << greetingMessage;

    out.device()->seek(0);
    out << quint16(block.size() - sizeof(quint16));
    if (write(block) == block.size()){
    	isGreetingMessageSent = true;
    }

}


int TcpSocketConnection::readDataIntoBuffer(int maxSize)
{

    if (maxSize > MaxBufferSize)
        return 0;

    int numBytesBeforeRead = buffer.size();
    if (numBytesBeforeRead == MaxBufferSize) {
        abort();
        return 0;
    }

    while (bytesAvailable() > 0 && buffer.size() < maxSize) {
        buffer.append(read(1));
        if (buffer.endsWith(SeparatorToken))
            break;
    }
    return buffer.size() - numBytesBeforeRead;
}

int TcpSocketConnection::dataLengthForCurrentDataType()
{
    if (bytesAvailable() <= 0 || readDataIntoBuffer() <= 0
            || !buffer.endsWith(SeparatorToken))
        return 0;

    buffer.chop(1);
    int number = buffer.toInt();
    buffer.clear();
    return number;
}

bool TcpSocketConnection::readProtocolHeader()
{
    if (transferTimerId) {
        killTimer(transferTimerId);
        transferTimerId = 0;
    }

    if (readDataIntoBuffer() <= 0) {
        transferTimerId = startTimer(TransferTimeout);
        return false;
    }

    if (buffer == "PING ") {
        currentDataType = HEHUI::PING;
    } else if (buffer == "PONG ") {
        currentDataType = HEHUI::PONG;
    } else if (buffer == "MESSAGE ") {
        currentDataType = HEHUI::MSG_CHAT_PLAIN;
    } else if (buffer == "GREETING ") {
        //currentDataType = Greeting;
    } else {
        currentDataType = HEHUI::UNDEFINED;
        abort();
        return false;
    }

    buffer.clear();
    numBytesForCurrentDataType = dataLengthForCurrentDataType();
    return true;
}

bool TcpSocketConnection::hasEnoughData()
{
    if (transferTimerId) {
        QObject::killTimer(transferTimerId);
        transferTimerId = 0;
    }

    if (numBytesForCurrentDataType <= 0)
        numBytesForCurrentDataType = dataLengthForCurrentDataType();

    if (bytesAvailable() < numBytesForCurrentDataType
            || numBytesForCurrentDataType <= 0) {
        transferTimerId = startTimer(TransferTimeout);
        return false;
    }

    return true;
}

void TcpSocketConnection::processData()
{
    buffer = read(numBytesForCurrentDataType);
    if (buffer.size() != numBytesForCurrentDataType) {
        abort();
        return;
    }

    switch (currentDataType) {
    case HEHUI::MSG_CHAT_PLAIN:
        emit signalNewChatMessageReceivedFromPeer(peerID, QString::fromUtf8(buffer));
        break;
    case HEHUI::PING:
        write("PONG 1 p");
        break;
    case HEHUI::PONG:
        pongTime.restart();
        break;
    default:
        break;
    }

    currentDataType = HEHUI::UNDEFINED;
    numBytesForCurrentDataType = 0;
    buffer.clear();
}



